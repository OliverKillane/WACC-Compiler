################ ARRAY UTILITIES LIBRARY ################

begin
    
    ##### ARRAY PRINTING FUNCTIONS #####

    # Print the given integer array
    # Change return type to void
    bool print_int_array(string ident, int[] arr) is
        int i = 0 ;
        print ident ;
        print " = [" ;
        int arr_len = len arr ;
        while (i < arr_len - 1) do
            print arr[i] ;
            i = i + 1 ;
            print ", "
        done ;
        print arr[i] ;
        println "]" ;
        return true
    end

    # Print the given boolean array
    # Change return type to void
    bool print_bool_array(string ident, bool[] arr) is
        int i = 0 ;
        print ident ;
        print " = [" ;
        int arr_len = len arr ;
        while (i < arr_len - 1) do
            print arr[i] ;
            i = i + 1 ;
            print ", "
        done ;
        print arr[i] ;
        println "]" ;
        return true
    end

    # Print the given characater array
    # Change return type to void
    bool print_char_array(string ident, char[] arr) is
        int i = 0 ;
        print ident ;
        print " = [" ;
        int arr_len = len arr ;
        while (i < arr_len - 1) do
            print arr[i] ;
            i = i + 1 ;
            print ", "
        done ;
        print arr[i] ;
        println "]" ;
        return true
    end

    ##### ARRAY FILL FUNCTIONS #####

    # Fill given integer array with given integer
    # Change return type to void
    bool fill_int_array(int elem, int[] arr) is
        int i = 0 ;
        int arr_len = len arr ;
        while (i < arr_len) do
            arr[i] = elem ;
            i = i + 1
        done ;
        return true
    end

    # Fill given boolean array with given boolean
    # Change return type to void
    bool fill_bool_array(bool elem, bool[] arr) is
        int i = 0 ;
        int arr_len = len arr ;
        while (i < arr_len) do
            arr[i] = elem ;
            i = i + 1
        done ;
        return true
    end

    # Fill given character array with given character
    # Change return type to void
    bool fill_char_array(char elem, char[] arr) is
        int i = 0 ;
        int arr_len = len arr ;
        while (i < arr_len) do
            arr[i] = elem ;
            i = i + 1
        done ;
        return true
    end

    ##### ARRAY FIND AND COUNT FUNCTIONS #####

    # Returns the index of the nth appearance of given element in given integer array
    # Returns -1 if given element is not present in given array n times
    int find_nth_int_array(int elem, int n, int[] arr) is
        int count = 0 ;
        int i = 0 ;
        int arr_len = len arr ;
        while (i < arr_len) do
            if (arr[i] == elem) then
                count = count + 1 ;
                if (count == n) then
                    return i
                else 
                    skip
                fi
            else
                skip
            fi ;
            i = i + 1
        done ;
        return (- 1)
    end

    # Returns the index of the nth appearance of given element in given boolean array
    # Returns -1 if given element is not present in given array n times
    int find_nth_bool_array(bool elem, int n, bool[] arr) is
        int count = 0 ;
        int i = 0 ;
        int arr_len = len arr ;
        while (i < arr_len) do
            if (arr[i] == elem) then
                count = count + 1 ;
                if (count == n) then
                    return i
                else 
                    skip
                fi
            else
                skip
            fi ;
            i = i + 1
        done ;
        return (- 1)
    end

    # Returns the index of the nth appearance of given element in given character array
    # Returns -1 if given element is not present in given array n times
    int find_nth_char_array(char elem, int n, char[] arr) is
        int count = 0 ;
        int i = 0 ;
        int arr_len = len arr ;
        while (i < arr_len) do
            if (arr[i] == elem) then
                count = count + 1 ;
                if (count == n) then
                    return i
                else 
                    skip
                fi
            else
                skip
            fi ;
            i = i + 1
        done ;
        return (- 1)
    end

    # Returns the index of the 1st appearance of given element in given integer array
    # Returns -1 if given element is not present in given array
    int find_int_arr(int elem, int[] arr) is
        int i = call find_nth_int_array(elem, 1, arr) ;
        return i
    end

    # Returns the index of the 1st appearance of given element in given boolean array
    # Returns -1 if given element is not present in given array
    int find_bool_arr(bool elem, bool[] arr) is
        int i = call find_nth_bool_array(elem, 1, arr) ;
        return i
    end

    # Returns the index of the 1st appearance of given element in given character array
    # Returns -1 if given element is not present in given array
    int find_char_arr(char elem, char[] arr) is
        int i = call find_nth_char_array(elem, 1, arr) ;
        return i
    end

    # Returns a pair with the 1st element being the number of appearances of given element in given integer array
    # and the 2nd element being the index of the last appearance of given element (or -1 if count is 0) 
    pair(int, int) count_last_int_array(int elem, int[] arr) is
        int count = 0 ;
        int i = 0 ;
        int arr_len = len arr ;
        int last = (- 1) ;
        while (i < arr_len) do
            if (arr[i] == elem) then
                count = count + 1 ;
                last = i
            else
                skip
            fi ;
            i = i + 1
        done ;
        pair(int, int) count_last = newpair (count, last) ;
        return count_last
    end

    # Returns a pair with the 1st element being the number of appearances of given element in given boolean array
    # and the 2nd element being the index of the last appearance of given element (or -1 if count is 0) 
    pair(int, int) count_last_bool_array(bool elem, bool[] arr) is
        int count = 0 ;
        int i = 0 ;
        int arr_len = len arr ;
        int last = (- 1) ;
        while (i < arr_len) do
            if (arr[i] == elem) then
                count = count + 1 ;
                last = i
            else
                skip
            fi ;
            i = i + 1
        done ;
        pair(int, int) count_last = newpair (count, last) ;
        return count_last
    end

    # Returns a pair with the 1st element being the number of appearances of given element in given character array
    # and the 2nd element being the index of the last appearance of given element (or -1 if count is 0) 
    pair(int, int) count_last_char_array(char elem, char[] arr) is
        int count = 0 ;
        int i = 0 ;
        int arr_len = len arr ;
        int last = (- 1) ;
        while (i < arr_len) do
            if (arr[i] == elem) then
                count = count + 1 ;
                last = i
            else
                skip
            fi ;
            i = i + 1
        done ;
        pair(int, int) count_last = newpair (count, last) ;
        return count_last
    end

    # Returns the number of appearances of given element in given integer array
    int count_int_array(int elem, int[] arr) is
        pair(int, int) count_last = call count_last_int_array(elem, arr) ;
        int count = fst count_last ;
        return count
    end

    # Returns the number of appearances of given element in given boolean array
    int count_bool_array(bool elem, bool[] arr) is
    pair(int, int) count_last = call count_last_bool_array(elem, arr) ;
    int count = fst count_last ;
    return count
    end

    # Returns the index of the appearance of given element in given character array
    int count_char_array(char elem, char[] arr) is
    pair(int, int) count_last = call count_last_char_array(elem, arr) ;
    int count = fst count_last ;
    return count
    end

    # Returns the index of the appearance of given element in given integer array
    int last_int_array(int elem, int[] arr) is
        pair(int, int) count_last = call count_last_int_array(elem, arr) ;
        int last = snd count_last ;
        return last
    end

    # Returns the index of the appearance of given element in given boolean array
    int last_bool_array(bool elem, bool[] arr) is
        pair(int, int) count_last = call count_last_bool_array(elem, arr) ;
        int last = snd count_last ;
        return last
    end

    # Returns the number of appearances of given element in given character array
    int last_char_array(char elem, char[] arr) is
        pair(int, int) count_last = call count_last_char_array(elem, arr) ;
        int last = snd count_last ;
        return last
    end

    ##### ARRAY CONTAINS FUNCTIONS #####

    # Returns true if given element exists in given integer array
    bool contains_int_array(int elem, int[] arr) is
        int count = call count_int_array(elem, arr) ;
        if (count > 0) then
            return true
        else
            return false
        fi
    end

    # Returns true if given element exists in given boolean array
    bool contains_bool_array(bool elem, bool[] arr) is
        int count = call count_bool_array(elem, arr) ;
        if (count > 0) then
            return true
        else
            return false
        fi
    end

    # Returns true if given element exists in given character array
    bool contains_char_array(char elem, char[] arr) is
        int count = call count_char_array(elem, arr) ;
        if (count > 0) then
            return true
        else
            return false
        fi
    end

    ##### ARRAY FOLD FUNCTIONS ####

    # Folds the given boolean array using bitwise AND operation
    bool fold_and_bool_arr(bool[] arr) is
        int i = 0 ; 
        int arr_len = len arr ;
        while (i < arr_len) do
            if (arr[i] == false) then
                return false
            else
                skip
            fi
        done ;
        return true
    end

    # Folds the given boolean array using bitwise OR operation
    bool fold_or_bool_arr(bool[] arr) is
        int i = 0 ; 
        int arr_len = len arr ;
        while (i < arr_len) do
            if (arr[i] == true) then
                return true
            else
                skip
            fi
        done ;
        return false
    end

    ##### ARRAY SORT FUNCTIONS #####

    ### MERGE SORT ###

    ## NEED 'init_int_array' TO BE IMPLEMENTED

    ### QUICK SORT ###

    # Swaps the values of the two given indices
    # Change return type to void
    bool swap(int i1, int i2, int[] arr) is
        int temp = arr[i1] ;
        arr[i1] = arr[i2] ;
        arr[i2] = temp ;
        return true
    end

    # Uses the element at index 'hi' as the pivot
    # the pivot will be placed at its final position in the sorted array
    # the rest of the elements will be swapped such that
    # all the elements to the left are less than the pivot
    # all the elements to the right are greater than the pivot
    # returns the so-called partitioning index
    int partition(int lo, int hi, int[] arr) is
        int pivot = arr[hi] ;
        int i = (lo - 1) ;
        
        int j = lo ;
        bool swapped = false ;
        while (j < hi) do
            if (arr[j] < pivot) then
                i = i + 1 ;
                swapped = call swap(i, j, arr)
            else
                skip
            fi ;
            j = j + 1
        done ;

        swapped = call swap(i + 1, hi, arr) ;

        return i + 1
    end

    # QuickSort helper function
    # Change return type to void
    bool quick_sort_helper(int lo, int hi, int[] arr) is
        bool sort = false ;
        if (lo < hi) then
            int par_index = call partition(lo, hi, arr) ;
            sort = call quick_sort_helper(lo, par_index - 1, arr) ;
            sort = call quick_sort_helper(par_index + 1, hi, arr)
        else
            skip
        fi ;
        return true
    end

    # Main QuickSort function
    # Change return type to void
    bool quick_sort(int[] arr) is
        int lo = 0 ;
        int hi = (len arr) - 1;
        bool sort = call quick_sort_helper(lo, hi, arr) ;
        return sort
    end

    ##### WILL NEED TO ADD NEW 'new' OPERATOR #####

    # # Initialize integer array of given size with given integer
    # int[] init_int_array(int elem, int size) is
    #     int[] arr = new arr[size] ;
    #     arr = call fill_int_array(elem, arr) ;
    #     return arr
    # end

    # # Initialize boolean array of given size with given boolean
    # bool[] init_bool_array(bool elem, int size) is
    #     bool[] arr = new arr[size] ;
    #     arr = call fill_bool_array(elem, arr) ;
    #     return arr
    # end

    # # Initialize character array of given size with given character
    # char[] init_char_array(char elem, int size) is
    #     char[] arr = new arr[size] ;
    #     arr = call fill_char_array(elem, arr) ;
    #     return arr
    # end

    # # Reverse given integer array
    # # Change return type to void ?
    # # Will need to also have array copy function to copy the original array
    # # into a temp array so that the original array could be reversed off of that
    # int[] reverse_int_array(int[] arr) is
    #     int i = 0 ;
    #     int arr_len = len arr ;
    #     int[] rev_arr = new int[arr_len] ;
    #     while (i < arr_len) do
    #         rev_arr[arr_len - i - 1] = arr[i] ;
    #         i = i + 1
    #     done ;
    #     return rev_arr
    # end

    # # Reverse given boolean array
    # # Change return type to void ?
    # # Will need to also have array copy function to copy the original array
    # # into a temp array so that the original array could be reversed off of that
    # bool[] reverse_bool_array(bool[] arr) is
    #     int i = 0 ;
    #     int arr_len = len arr ;
    #     bool[] rev_arr = new bool[arr_len] ;
    #     while (i < arr_len) do
    #         rev_arr[arr_len - i - 1] = arr[i] ;
    #         i = i + 1
    #     done ;
    #     return rev_arr
    # end

    # # Reverse given character array
    # # Change return type to void ?
    # # Will need to also have array copy function to copy the original array
    # # into a temp array so that the original array could be reversed off of that
    # char[] reverse_char_array(char[] arr) is
    #     int i = 0 ;
    #     int arr_len = len arr ;
    #     char[] rev_arr = new char[arr_len] ;
    #     while (i < arr_len) do
    #         rev_arr[arr_len - i - 1] = arr[i] ;
    #         i = i + 1
    #     done ;
    #     return rev_arr
    # end

    int[] arr = [2, 3, 1, -2, -5, 10, 9, 11, 13, 14, 15] ;
    bool print_arr = call print_int_array("unsorted arr", arr) ;
    bool sort = call quick_sort(arr) ;
    print_arr = call print_int_array("sorted arr", arr) ;

    skip

end