################ ARRAY UTILITIES LIBRARY ################

### POSSIBLE ADDITIONS ###
## Array equality/comparison

begin
    
    ##### ARRAY PRINTING FUNCTIONS #####

    # Print the given integer array
    void print_int_arr(string ident, int[] arr) is
        int arr_len = len arr ;
        if (arr_len == 0) then 
            print ident ;
            println " = []"
        else
            int i = 0 ;
            print ident ;
            print " = [" ;
            while (i < arr_len - 1) do
                print arr[i] ;
                i = i + 1 ;
                print ", "
            done ;
            print arr[i] ;
            println "]"
        fi ;
        return
    end

    # Print the given boolean array
    void print_bool_arr(string ident, bool[] arr) is 
        int arr_len = len arr ;
        if (arr_len == 0) then 
            print ident ;
            println " = []"
        else
            int i = 0 ;
            print ident ;
            print " = [" ;
            while (i < arr_len - 1) do
                print arr[i] ;
                i = i + 1 ;
                print ", "
            done ;
            print arr[i] ;
            println "]"
        fi ;
        return
    end

    # Print the given characater array
    void print_char_arr(string ident, char[] arr) is   
        int arr_len = len arr ;
        if (arr_len == 0) then 
            print ident ;
            println " = []"
        else
            int i = 0 ;
            print ident ;
            print " = [" ;
            while (i < arr_len - 1) do
                print "\'" ;
                print arr[i] ;
                print "\'" ;
                i = i + 1 ;
                print ", "
            done ;
            print "\'" ;
            print arr[i] ;
            print "\'" ;
            println "]"
        fi ;
        return
    end

    ##### ARRAY FILL FUNCTIONS #####

    # Fill given integer array with given integer
    void fill_int_arr(int elem, int[] arr) is
        int i = 0 ;
        int arr_len = len arr ;
        while (i < arr_len) do
            arr[i] = elem ;
            i = i + 1
        done ;
        return
    end

    # Fill given boolean array with given boolean
    void fill_bool_arr(bool elem, bool[] arr) is
        int i = 0 ;
        int arr_len = len arr ;
        while (i < arr_len) do
            arr[i] = elem ;
            i = i + 1
        done ;
        return
    end

    # Fill given character array with given character
    void fill_char_arr(char elem, char[] arr) is
        int i = 0 ;
        int arr_len = len arr ;
        while (i < arr_len) do
            arr[i] = elem ;
            i = i + 1
        done ;
        return
    end

    ##### ARRAY COUNT FUNCTIONS #####

    # Returns a pair with the 1st element being the number of appearances of given element in given integer array
    # and the 2nd element being the index of the last appearance of given element (or -1 if count is 0) 
    pair(int, int) count_last_int_arr(int elem, int[] arr) is
        int count = 0 ;
        int i = 0 ;
        int arr_len = len arr ;
        int last = (- 1) ;
        while (i < arr_len) do
            if (arr[i] == elem) then
                count = count + 1 ;
                last = i
            else
                skip
            fi ;
            i = i + 1
        done ;
        pair(int, int) count_last = newpair (count, last) ;
        return count_last
    end

    # Returns a pair with the 1st element being the number of appearances of given element in given boolean array
    # and the 2nd element being the index of the last appearance of given element (or -1 if count is 0) 
    pair(int, int) count_last_bool_arr(bool elem, bool[] arr) is
        int count = 0 ;
        int i = 0 ;
        int arr_len = len arr ;
        int last = (- 1) ;
        while (i < arr_len) do
            if (arr[i] == elem) then
                count = count + 1 ;
                last = i
            else
                skip
            fi ;
            i = i + 1
        done ;
        pair(int, int) count_last = newpair (count, last) ;
        return count_last
    end

    # Returns a pair with the 1st element being the number of appearances of given element in given character array
    # and the 2nd element being the index of the last appearance of given element (or -1 if count is 0) 
    pair(int, int) count_last_char_arr(char elem, char[] arr) is
        int count = 0 ;
        int i = 0 ;
        int arr_len = len arr ;
        int last = (- 1) ;
        while (i < arr_len) do
            if (arr[i] == elem) then
                count = count + 1 ;
                last = i
            else
                skip
            fi ;
            i = i + 1
        done ;
        pair(int, int) count_last = newpair (count, last) ;
        return count_last
    end

    # Returns the number of appearances of given element in given integer array
    int count_int_arr(int elem, int[] arr) is
        pair(int, int) count_last = call count_last_int_arr(elem, arr) ;
        int count = fst count_last ;
        return count
    end

    # Returns the number of appearances of given element in given boolean array
    int count_bool_arr(bool elem, bool[] arr) is
    pair(int, int) count_last = call count_last_bool_arr(elem, arr) ;
    int count = fst count_last ;
    return count
    end

    # Returns the index of the appearance of given element in given character array
    int count_char_arr(char elem, char[] arr) is
    pair(int, int) count_last = call count_last_char_arr(elem, arr) ;
    int count = fst count_last ;
    return count
    end

    ##### ARRAY SEARCH FUNCTIONS #####

    # Returns the index of the nth appearance of given element in given integer array
    # Returns -1 if given element is not present in given array n times
    int find_nth_int_arr(int elem, int n, int[] arr) is
        int count = 0 ;
        int i = 0 ;
        int arr_len = len arr ;
        while (i < arr_len) do
            if (arr[i] == elem) then
                count = count + 1 ;
                if (count == n) then
                    return i
                else 
                    skip
                fi
            else
                skip
            fi ;
            i = i + 1
        done ;
        return (- 1)
    end

    # Returns the index of the nth appearance of given element in given boolean array
    # Returns -1 if given element is not present in given array n times
    int find_nth_bool_arr(bool elem, int n, bool[] arr) is
        int count = 0 ;
        int i = 0 ;
        int arr_len = len arr ;
        while (i < arr_len) do
            if (arr[i] == elem) then
                count = count + 1 ;
                if (count == n) then
                    return i
                else 
                    skip
                fi
            else
                skip
            fi ;
            i = i + 1
        done ;
        return (- 1)
    end

    # Returns the index of the nth appearance of given element in given character array
    # Returns -1 if given element is not present in given array n times
    int find_nth_char_arr(char elem, int n, char[] arr) is
        int count = 0 ;
        int i = 0 ;
        int arr_len = len arr ;
        while (i < arr_len) do
            if (arr[i] == elem) then
                count = count + 1 ;
                if (count == n) then
                    return i
                else 
                    skip
                fi
            else
                skip
            fi ;
            i = i + 1
        done ;
        return (- 1)
    end

    # Returns the index of the 1st appearance of given element in given integer array
    # Returns -1 if given element is not present in given array
    int find_first_int_arr(int elem, int[] arr) is
        int i = call find_nth_int_arr(elem, 1, arr) ;
        return i
    end

    # Returns the index of the 1st appearance of given element in given boolean array
    # Returns -1 if given element is not present in given array
    int find_first_bool_arr(bool elem, bool[] arr) is
        int i = call find_nth_bool_arr(elem, 1, arr) ;
        return i
    end

    # Returns the index of the 1st appearance of given element in given character array
    # Returns -1 if given element is not present in given array
    int find_first_char_arr(char elem, char[] arr) is
        int i = call find_nth_char_arr(elem, 1, arr) ;
        return i
    end

    # Returns the index of the last appearance of given element in given integer array
    # Returns -1 if given element is not present in given array
    int find_last_int_arr(int elem, int[] arr) is
        pair(int, int) count_last = call count_last_int_arr(elem, arr) ;
        int last = snd count_last ;
        return last
    end

    # Returns the index of the last appearance of given element in given boolean array
    # Returns -1 if given element is not present in given array
    int find_last_bool_arr(bool elem, bool[] arr) is
        pair(int, int) count_last = call count_last_bool_arr(elem, arr) ;
        int last = snd count_last ;
        return last
    end

     # Returns the index of the last appearance of given element in given character array
     # Returns -1 if given element is not present in given array
    int find_last_char_arr(char elem, char[] arr) is
        pair(int, int) count_last = call count_last_char_arr(elem, arr) ;
        int last = snd count_last ;
        return last
    end

    # Returns the index of the first encountered appearance of the given target in an integer array
    # after following the binary search algorithm (i.e. not necessarily the element's first occurence in the array)
    # Returns -1 if given target is not present in given array
    # The given arr MUST be sorted
    int binary_search_int_arr(int target, int[] arr) is
        int arr_len = len arr ;
        int left = 0 ;
        int right = arr_len - 1 ;
        int mid = (- 1) ;

        while (left <= right) do
            mid = (left + right) / 2 ;
            if (arr[mid] < target) then
                left = mid + 1
            else 
                if (arr[mid] > target) then
                    right = mid - 1 
                else
                    return mid
                fi
            fi
        done ;

        return (- 1)
    end

    # Returns the index of the first encountered appearance of the given target in an character array
    # after following the binary search algorithm (i.e. not necessarily the element's first occurence in the array)
    # Returns -1 if given target is not present in given array
    # The given array MUST be sorted
    int binary_search_char_arr(char target, char[] arr) is
        int arr_len = len arr ;
        int left = 0 ;
        int right = arr_len - 1 ;
        int mid = (- 1) ;

        while (left <= right) do
            mid = (left + right) / 2 ;
            if (arr[mid] < target) then
                left = mid + 1
            else 
                if (arr[mid] > target) then
                    right = mid - 1 
                else
                    return mid
                fi
            fi
        done ;

        return (- 1)
    end

    ##### ARRAY CONTAINS FUNCTIONS #####

    # Returns true if given element exists in given integer array
    bool contains_int_arr(int elem, int[] arr) is
        int found = call find_first_int_arr(elem, arr) ;
        return (found != -1)
    end

    # Returns true if given element exists in given boolean array
    bool contains_bool_arr(bool elem, bool[] arr) is
        int found = call find_first_bool_arr(elem, arr) ;
        return (found != -1)
    end

    # Returns true if given element exists in given character array
    bool contains_char_arr(char elem, char[] arr) is
        int found = call find_first_char_arr(elem, arr) ;
        return (found != -1)
    end

    ##### ARRAY MEMORY MANIPULATION #####

    # Swaps the values of the two given indices in an integer array
    bool swap_int(int i1, int i2, int[] arr) is
        int arr_len = len arr ;
        if ((i1 >= arr_len || i1 < 0) || (i2 >= arr_len || i2 < 0)) then
            println "One, or both, of the given indices is out of bounds!" ;
            return false
        else
            int temp = arr[i1] ;
            arr[i1] = arr[i2] ;
            arr[i2] = temp ;
            return true
        fi
    end

    # Swaps the values of the two given indices in a boolean array
    bool swap_bool(int i1, int i2, bool[] arr) is
        int arr_len = len arr ;
        if ((i1 >= arr_len || i1 < 0) || (i2 >= arr_len || i2 < 0)) then
            println "One, or both, of the given indices is out of bounds!" ;
            return false
        else
            bool temp = arr[i1] ;
            arr[i1] = arr[i2] ;
            arr[i2] = temp ;
            return true
        fi
    end

    # Swaps the values of the two given indices in a character array
    bool swap_char(int i1, int i2, char[] arr) is
        int arr_len = len arr ;
        if ((i1 >= arr_len || i1 < 0) || (i2 >= arr_len || i2 < 0)) then
            println "One, or both, of the given indices is out of bounds!" ;
            return false
        else
            char temp = arr[i1] ;
            arr[i1] = arr[i2] ;
            arr[i2] = temp ;
            return true
        fi
    end

    # Copies the elements of given integer array 'arr' into the given buffer array 'buff'
    # If the 'rev' flag is set, then the order is reversed
    bool copy_int_arr(int[] arr, int[] buff, bool rev) is
        int arr_len = len arr ;
        int buff_len = len buff ;
        if (buff_len != arr_len) then
            return false
        else
            int i = 0 ;
            int j = 0 ;
            while (i < arr_len) do
                if (!rev) then
                    j = i 
                else
                    j = arr_len - i - 1
                fi ;
                buff[j] = arr[i] ;
                i = i + 1
            done ;
            return true
        fi
    end

    # Copies the elements of given boolean array 'arr' into the given buffer array 'buff'
    # If the 'rev' flag is set, then the order is reversed
    bool copy_bool_arr(bool[] arr, bool[] buff, bool rev) is
        int arr_len = len arr ;
        int buff_len = len buff ;
        if (buff_len != arr_len) then
            return false
        else
            int i = 0 ;
            int j = 0 ;
            while (i < arr_len) do
                if (!rev) then
                    j = i 
                else
                    j = arr_len - i - 1
                fi ;
                buff[j] = arr[i] ;
                i = i + 1
            done ;
            return true
        fi
    end

    # Copies the elements of given character array 'arr' into the given buffer array 'buff'
    # If the 'rev' flag is set, then the order is reversed
    bool copy_char_arr(char[] arr, char[] buff, bool rev) is
        int arr_len = len arr ;
        int buff_len = len buff ;
        if (buff_len != arr_len) then
            return false
        else
            int i = 0 ;
            int j = 0 ;
            while (i < arr_len) do
                if (!rev) then
                    j = i 
                else
                    j = arr_len - i - 1
                fi ;
                buff[j] = arr[i] ;
                i = i + 1
            done ;
            return true
        fi
    end

    # Copies the given integer array 'arr' into the given buffer array 'buff' and frees 'arr'
    # If the 'rev' flag is set, then the order is reversed
    bool move_int_arr(int[] arr, int[] buff, bool reverse) is
        bool copied = call copy_int_arr(arr, buff, reverse) ;
        free arr ;
        return copied
    end

    # Copies the given boolean array 'arr' into the given buffer array 'buff' and frees 'arr'
    # If the 'rev' flag is set, then the order is reversed
    bool move_bool_arr(bool[] arr, bool[] buff, bool reverse) is
        bool copied = call copy_bool_arr(arr, buff, reverse) ;
        free arr ;
        return copied
    end

    # Copies the given character array 'arr' into the given buffer array 'buff' and frees 'arr'
    # If the 'rev' flag is set, then the order is reversed
    bool move_char_arr(char[] arr, char[] buff, bool reverse) is
        bool copied = call copy_char_arr(arr, buff, reverse) ;
        free arr ;
        return copied
    end

    # Concatenates the two given integer arrays, 'arr1' and 'arr2', and stores the result in
    # the given buffer array 'buff'
    bool concat_int_arrs(int[] arr1, int[] arr2, int[] buff) is
        int arr1_len = len arr1 ;
        int arr2_len = len arr2 ;
        int buff_len = len buff ;

        if (arr1_len + arr2_len != buff_len) then
            return false 
        else    
            int i = 0 ;
            while (i < arr1_len) do
                buff[i] = arr1[i] ;
                i = i + 1
            done ;
            while (i < (arr1_len + arr2_len)) do
                buff[i] = arr2[i - arr1_len] ;
                i = i + 1
            done ;
            return true
        fi
    end

    # Concatenates the two given boolean arrays, 'arr1' and 'arr2', and stores the result in
    # the given buffer array 'buff'
    bool concat_bool_arrs(bool[] arr1, bool[] arr2, bool[] buff) is
        int arr1_len = len arr1 ;
        int arr2_len = len arr2 ;
        int buff_len = len buff ;

        if (arr1_len + arr2_len != buff_len) then
            return false 
        else    
            int i = 0 ;
            while (i < arr1_len) do
                buff[i] = arr1[i] ;
                i = i + 1
            done ;
            while (i < (arr1_len + arr2_len)) do
                buff[i] = arr2[i - arr1_len] ;
                i = i + 1
            done ;
            return true
        fi
    end

    # Concatenates the two given character arrays, 'arr1' and 'arr2', and stores the result in
    # the given buffer array 'buff'
    bool concat_char_arrs(char[] arr1, char[] arr2, char[] buff) is
        int arr1_len = len arr1 ;
        int arr2_len = len arr2 ;
        int buff_len = len buff ;

        if (arr1_len + arr2_len != buff_len) then
            return false 
        else    
            int i = 0 ;
            while (i < arr1_len) do
                buff[i] = arr1[i] ;
                i = i + 1
            done ;
            while (i < (arr1_len + arr2_len)) do
                buff[i] = arr2[i - arr1_len] ;
                i = i + 1
            done ;
            return true
        fi
    end

    ##### ARRAY FOLD FUNCTIONS #####

    # Folds the given boolean array using bitwise AND operation
    bool fold_and_bool_arr(bool[] arr) is
        int i = 0 ; 
        int arr_len = len arr ;
        while (i < arr_len) do
            if (arr[i] == false) then
                return false
            else
                skip
            fi ;
            i = i + 1
        done ;
        return true
    end

    # Folds the given boolean array using bitwise OR operation
    bool fold_or_bool_arr(bool[] arr) is
        int i = 0 ; 
        int arr_len = len arr ;
        while (i < arr_len) do
            if (arr[i] == true) then
                return true
            else
                skip
            fi ;
            i = i + 1
        done ;
        return false
    end

    ##### ARRAY SORT FUNCTIONS #####

    #### INTEGER ARRAYS ####

    ### BUBBLE SORT ###

    # Performs BubbleSort on given integer array
    # If the 'desc' flag is set, then the algorithm follows descending order
    bool bubble_sort_int(int[] arr, bool desc) is
        int i = 0 ;
        int j = 0 ;
        int arr_len = len arr ;
        bool swapped = false ;

        while (i < arr_len - 1) do
            while (j < arr_len - i - 1) do
                if (!desc) then
                    if (arr[j] > arr[j + 1]) then
                        swapped = call swap_int(j, j + 1, arr)
                    else
                        skip
                    fi
                else
                    if (arr[j] < arr[j + 1]) then
                        swapped = call swap_int(j, j + 1, arr)
                    else
                        skip
                    fi
                fi ;
                j = j + 1
            done ;
            j = 0 ;
            i = i + 1
        done ;

        return true
    end

    ### HEAP SORT ###

    # Creates maxHeap if desc is not set
    # Creates minHeap if desc is set
    bool heapify_int(int[] arr, int size, int root, bool desc) is
        int comp = root ;
        int left = 2 * root + 1 ;
        int right = 2 * root + 2 ;

        if (left < size) then
            if (!desc) then
                if (arr[left] > arr[comp]) then
                    comp = left
                else 
                    skip
                fi
            else
                if (arr[left] < arr[comp]) then
                    comp = left
                else 
                    skip
                fi
            fi 
        else
            skip
        fi ;

        if (right < size) then
            if (!desc) then
                if (arr[right] > arr[comp]) then
                    comp = right
                else 
                    skip
                fi
            else
                if (arr[right] < arr[comp]) then
                    comp = right
                else 
                    skip
                fi
            fi 
        else
            skip
        fi ;

        bool swapped = false ;
        bool heapified = false ;

        if (comp != root) then
            swapped = call swap_int(root, comp, arr) ;
            heapified = call heapify_int(arr, size, comp, desc)
        else
            skip
        fi ;

        return true
    end

    # Main HeapSort function
    bool heap_sort_int(int[] arr, bool desc) is
        int arr_len = len arr ;
        int i = (arr_len / 2) - 1 ;
        bool heapified = false ;
                
        while (i >= 0) do
            heapified = call heapify_int(arr, arr_len, i, desc) ;
            i = i - 1
        done ;

        i = arr_len - 1 ;
        bool swapped = false ;

        while (i > 0) do
            swapped = call swap_int(0, i, arr) ;
            heapified = call heapify_int(arr, i, 0, desc) ;
            i = i - 1
        done ;

        return true
    end

    ### QUICK SORT ###

    # Uses the element at index 'hi' as the pivot
    # the pivot will be placed at its final position in the sorted array
    # the rest of the elements will be swapped such that
    # all the elements to the left are less than the pivot     | VICE-VERSA IF
    # all the elements to the right are greater than the pivot | 'desc' is 'true'
    # returns the so-called partitioning index
    int partition_int(int lo, int hi, int[] arr, bool desc) is
        int pivot = arr[hi] ;
        int i = (lo - 1) ;
        
        int j = lo ;
        bool swapped = false ;
        while (j < hi) do
            if (!desc) then
                if (arr[j] < pivot) then
                    i = i + 1 ;
                    swapped = call swap_int(i, j, arr)
                else
                    skip
                fi
            else
                if (arr[j] > pivot) then
                    i = i + 1 ;
                    swapped = call swap_int(i, j, arr)
                else
                    skip
                fi
            fi ;
            j = j + 1
        done ;

        swapped = call swap_int(i + 1, hi, arr) ;

        return i + 1
    end

    # QuickSort helper function
    void quick_sort_int_helper(int lo, int hi, int[] arr, bool desc) is
        if (lo < hi) then
            int par_index = call partition_int(lo, hi, arr, desc) ;
            call quick_sort_int_helper(lo, par_index - 1, arr, desc) ;
            call quick_sort_int_helper(par_index + 1, hi, arr, desc)
        else
            skip
        fi ;
        return
    end

    # Main QuickSort function - performs Quick Sort on given integer array
    # If the 'desc' flag is set, then the algorithm follows descending order
    void quick_sort_int(int[] arr, bool desc) is
        int lo = 0 ;
        int hi = (len arr) - 1;
        call quick_sort_int_helper(lo, hi, arr, desc) ;
        return
    end

    #### CHARACTER ARRAYS ####

    # Performs BubbleSort on given character array
    # If the 'desc' flag is set, then the algorithm follows descending order
    bool bubble_sort_char(char[] arr, bool desc) is
        int i = 0 ;
        int j = 0 ;
        int arr_len = len arr ;
        bool swapped = false ;

        while (i < arr_len - 1) do
            while (j < arr_len - i - 1) do
                if (!desc) then
                    if (arr[j] > arr[j + 1]) then
                        swapped = call swap_char(j, j + 1, arr)
                    else
                        skip
                    fi
                else
                    if (arr[j] < arr[j + 1]) then
                        swapped = call swap_char(j, j + 1, arr)
                    else
                        skip
                    fi
                fi ;
                j = j + 1
            done ;
            j = 0 ;
            i = i + 1
        done ;

        return true
    end

    ### HEAP SORT ###

    # Creates maxHeap if desc is not set
    # Creates minHeap if desc is set
    bool heapify_char(char[] arr, int size, int root, bool desc) is
        int comp = root ;
        int left = 2 * root + 1 ;
        int right = 2 * root + 2 ;

        if (left < size) then
            if (!desc) then
                if (arr[left] > arr[comp]) then
                    comp = left
                else 
                    skip
                fi
            else
                if (arr[left] < arr[comp]) then
                    comp = left
                else 
                    skip
                fi
            fi 
        else
            skip
        fi ;

        if (right < size) then
            if (!desc) then
                if (arr[right] > arr[comp]) then
                    comp = right
                else 
                    skip
                fi
            else
                if (arr[right] < arr[comp]) then
                    comp = right
                else 
                    skip
                fi
            fi 
        else
            skip
        fi ;

        bool swapped = false ;
        bool heapified = false ;

        if (comp != root) then
            swapped = call swap_char(root, comp, arr) ;
            heapified = call heapify_char(arr, size, comp, desc)
        else
            skip
        fi ;

        return true
    end

    # Main HeapSort function
    # If the 'desc' flag is set, then the algorithm follows descending order
    bool heap_sort_char(char[] arr, bool desc) is
        int arr_len = len arr ;
        int i = (arr_len / 2) - 1 ;
        bool heapified = false ;
                
        while (i >= 0) do
            heapified = call heapify_char(arr, arr_len, i, desc) ;
            i = i - 1
        done ;

        i = arr_len - 1 ;
        bool swapped = false ;

        while (i > 0) do
            swapped = call swap_char(0, i, arr) ;
            heapified = call heapify_char(arr, i, 0, desc) ;
            i = i - 1
        done ;

        return true
    end

    ### QUICK SORT ###

    # Uses the element at index 'hi' as the pivot
    # the pivot will be placed at its final position in the sorted array
    # the rest of the elements will be swapped such that
    # all the elements to the left are less than the pivot     | VICE-VERSA IF
    # all the elements to the right are greater than the pivot | 'desc' is 'true'
    # returns the so-called partitioning index
    int partition_char(int lo, int hi, char[] arr, bool desc) is
        char pivot = arr[hi] ;
        int i = (lo - 1) ;
        
        int j = lo ;
        bool swapped = false ;
        while (j < hi) do
            if (!desc) then
                if (arr[j] < pivot) then
                    i = i + 1 ;
                    swapped = call swap_char(i, j, arr)
                else
                    skip
                fi
            else
                if (arr[j] > pivot) then
                    i = i + 1 ;
                    swapped = call swap_char(i, j, arr)
                else
                    skip
                fi
            fi ;
            j = j + 1
        done ;

        swapped = call swap_char(i + 1, hi, arr) ;

        return i + 1
    end

    # QuickSort helper function
    void quick_sort_char_helper(int lo, int hi, char[] arr, bool desc) is
        if (lo < hi) then
            int par_index = call partition_char(lo, hi, arr, desc) ;
            call quick_sort_char_helper(lo, par_index - 1, arr, desc) ;
            call quick_sort_char_helper(par_index + 1, hi, arr, desc)
        else
            skip
        fi ;
        return
    end

    # Main QuickSort function - performs Quick Sort on given character array
    # If the 'desc' flag is set, then the algorithm follows descending order
    void quick_sort_char(char[] arr, bool desc) is
        int lo = 0 ;
        int hi = (len arr) - 1;
        call quick_sort_char_helper(lo, hi, arr, desc) ;
        return
    end

    ##### WILL NEED TO ADD NEW 'new' OPERATOR #####

    # # Initialize integer array of given size with given integer
    # int[] init_int_arr(int elem, int size) is
    #     int[] arr = new arr[size] ;
    #     arr = call fill_int_arr(elem, arr) ;
    #     return arr
    # end

    # # Initialize boolean array of given size with given boolean
    # bool[] init_bool_arr(bool elem, int size) is
    #     bool[] arr = new arr[size] ;
    #     arr = call fill_bool_arr(elem, arr) ;
    #     return arr
    # end

    # # Initialize character array of given size with given character
    # char[] init_char_arr(char elem, int size) is
    #     char[] arr = new arr[size] ;
    #     arr = call fill_char_arr(elem, arr) ;
    #     return arr
    # end
    
end