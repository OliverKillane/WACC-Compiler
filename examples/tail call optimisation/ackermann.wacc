# A demonstration of tail call optimisation from multiply returns in a function
#
# As the two commented calls are returned directly, theyt can be converted into 
# instructions to place to call arguments in the parameter variables, and then 
# jump to the start of the function.
#
# Expected behaviour is to output '13'.
#
# We can see this in the first stage of armcode (temporaries, just after 
# threecode - where the tail call optimisation is done).
#
# f_ack:
# b_f_ack_0:
#         MOV     T2,     T0
#         MOV     T3,     #0
#         MOV     T4,     #0
#         CMP     T2,     T3
#         MOVEQ   T4,     #1
#         MOV     T2,     T4
#         CMP     T2,     #1
#         BEQ     b_f_ack_1
#         MOV     T2,     T1
#         MOV     T3,     #0
#         MOV     T5,     #0
#         CMP     T2,     T3
#         MOVEQ   T5,     #1
#         MOV     T2,     T5
#         CMP     T2,     #1
#         BEQ     b_f_ack_2
#         MOV     T2,     T0
#         MOV     T3,     T1
#         MOV     T6,     #1
#         SUBS    T3,     T3,     T6
#         BLVS    overflow_handler
#         INTERNAL OPERATION: CALL f_ack   T2, ARGS(T2,T3)
#         MOV     T7,     T2
#         MOV     T2,     T0
#         MOV     T3,     #1
#         SUBS    T2,     T2,     T3
#         BLVS    overflow_handler
#         MOV     T3,     T7
#         MOV     T1,     T3
#         MOV     T0,     T2
#         B       b_f_ack_0
# b_f_ack_1:
#         MOV     T2,     T1
#         MOV     T3,     #1
#         ADDS    T2,     T2,     T3
#         BLVS    overflow_handler
#         INTERNAL OPERATION: RETURN      T2
# b_f_ack_2:
#         MOV     T2,     T0
#         MOV     T3,     #1
#         SUBS    T2,     T2,     T3
#         BLVS    overflow_handler
#         MOV     T3,     #1
#         MOV     T1,     T3
#         MOV     T0,     T2
#         B       b_f_ack_0
#
# Only a single recursive call remains (which is not a tail call, and therefore 
# cannot be optimised out).

begin
    int ack(int m, int n) is
        if m == 0 then
            return n + 1 
        else 
            if n == 0 then 
                int ack = call ack(m-1, 1); # tail call optimised
                return ack 
            else
                int ack = call ack(m, n - 1);
                ack = call ack(m - 1, ack); # tail call optimised
                return ack 
            fi
        fi
    end

    int res = call ack(2,5);
    println res
end