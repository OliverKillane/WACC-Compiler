#![allow(non_snake_case)]

use super::*;
use rstest::rstest;

#[rstest]
#[case("../tests/valid/scope/scopeRedefine.wacc", include_str!("../tests/valid/scope/scopeRedefine.wacc"), vec![])]
#[case("../tests/valid/scope/scopeBasic.wacc", include_str!("../tests/valid/scope/scopeBasic.wacc"), vec![])]
#[case("../tests/valid/scope/ifNested1.wacc", include_str!("../tests/valid/scope/ifNested1.wacc"), vec![])]
#[case("../tests/valid/scope/scopeSimpleRedefine.wacc", include_str!("../tests/valid/scope/scopeSimpleRedefine.wacc"), vec![])]
#[case("../tests/valid/scope/scopeWhileNested.wacc", include_str!("../tests/valid/scope/scopeWhileNested.wacc"), vec![])]
#[case("../tests/valid/scope/scopeIfRedefine.wacc", include_str!("../tests/valid/scope/scopeIfRedefine.wacc"), vec![])]
#[case("../tests/valid/scope/ifNested2.wacc", include_str!("../tests/valid/scope/ifNested2.wacc"), vec![])]
#[case("../tests/valid/scope/scopeWhileRedefine.wacc", include_str!("../tests/valid/scope/scopeWhileRedefine.wacc"), vec![])]
#[case("../tests/valid/scope/intsAndKeywords.wacc", include_str!("../tests/valid/scope/intsAndKeywords.wacc"), vec![])]
#[case("../tests/valid/scope/printAllTypes.wacc", include_str!("../tests/valid/scope/printAllTypes.wacc"), vec![])]
#[case("../tests/valid/scope/scopeVars.wacc", include_str!("../tests/valid/scope/scopeVars.wacc"), vec![])]
#[case("../tests/valid/scope/indentationNotImportant.wacc", include_str!("../tests/valid/scope/indentationNotImportant.wacc"), vec![])]
#[case("../tests/valid/scope/scope.wacc", include_str!("../tests/valid/scope/scope.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/integerOverflow/intnegateOverflow2.wacc", include_str!("../tests/valid/runtimeErr/integerOverflow/intnegateOverflow2.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/integerOverflow/intWayOverflow.wacc", include_str!("../tests/valid/runtimeErr/integerOverflow/intWayOverflow.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/integerOverflow/intmultOverflow.wacc", include_str!("../tests/valid/runtimeErr/integerOverflow/intmultOverflow.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/integerOverflow/intJustOverflow.wacc", include_str!("../tests/valid/runtimeErr/integerOverflow/intJustOverflow.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/integerOverflow/intnegateOverflow.wacc", include_str!("../tests/valid/runtimeErr/integerOverflow/intnegateOverflow.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/integerOverflow/intnegateOverflow4.wacc", include_str!("../tests/valid/runtimeErr/integerOverflow/intnegateOverflow4.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/integerOverflow/intnegateOverflow3.wacc", include_str!("../tests/valid/runtimeErr/integerOverflow/intnegateOverflow3.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/integerOverflow/intUnderflow.wacc", include_str!("../tests/valid/runtimeErr/integerOverflow/intUnderflow.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/divideByZero/divZero.wacc", include_str!("../tests/valid/runtimeErr/divideByZero/divZero.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/divideByZero/divideByZero.wacc", include_str!("../tests/valid/runtimeErr/divideByZero/divideByZero.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/divideByZero/modByZero.wacc", include_str!("../tests/valid/runtimeErr/divideByZero/modByZero.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/nullDereference/readNull2.wacc", include_str!("../tests/valid/runtimeErr/nullDereference/readNull2.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/nullDereference/useNull1.wacc", include_str!("../tests/valid/runtimeErr/nullDereference/useNull1.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/nullDereference/readNull1.wacc", include_str!("../tests/valid/runtimeErr/nullDereference/readNull1.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/nullDereference/useNull2.wacc", include_str!("../tests/valid/runtimeErr/nullDereference/useNull2.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/nullDereference/setNull2.wacc", include_str!("../tests/valid/runtimeErr/nullDereference/setNull2.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/nullDereference/freeNull.wacc", include_str!("../tests/valid/runtimeErr/nullDereference/freeNull.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/nullDereference/setNull1.wacc", include_str!("../tests/valid/runtimeErr/nullDereference/setNull1.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/arrayOutOfBounds/arrayOutOfBounds.wacc", include_str!("../tests/valid/runtimeErr/arrayOutOfBounds/arrayOutOfBounds.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/arrayOutOfBounds/arrayOutOfBoundsWrite.wacc", include_str!("../tests/valid/runtimeErr/arrayOutOfBounds/arrayOutOfBoundsWrite.wacc"), vec![])]
#[case("../tests/valid/runtimeErr/arrayOutOfBounds/arrayNegBounds.wacc", include_str!("../tests/valid/runtimeErr/arrayOutOfBounds/arrayNegBounds.wacc"), vec![])]
#[case("../tests/valid/function/simple_functions/incFunction.wacc", include_str!("../tests/valid/function/simple_functions/incFunction.wacc"), vec![])]
#[case("../tests/valid/function/simple_functions/functionUpdateParameter.wacc", include_str!("../tests/valid/function/simple_functions/functionUpdateParameter.wacc"), vec![])]
#[case("../tests/valid/function/simple_functions/functionSimpleLoop.wacc", include_str!("../tests/valid/function/simple_functions/functionSimpleLoop.wacc"), vec![])]
#[case("../tests/valid/function/simple_functions/functionDoubleReturn.wacc", include_str!("../tests/valid/function/simple_functions/functionDoubleReturn.wacc"), vec![])]
#[case("../tests/valid/function/simple_functions/sameArgName2.wacc", include_str!("../tests/valid/function/simple_functions/sameArgName2.wacc"), vec![])]
#[case("../tests/valid/function/simple_functions/functionMultiReturns.wacc", include_str!("../tests/valid/function/simple_functions/functionMultiReturns.wacc"), vec![])]
#[case("../tests/valid/function/simple_functions/sameNameAsVar.wacc", include_str!("../tests/valid/function/simple_functions/sameNameAsVar.wacc"), vec![])]
#[case("../tests/valid/function/simple_functions/functionIfReturns.wacc", include_str!("../tests/valid/function/simple_functions/functionIfReturns.wacc"), vec![])]
#[case("../tests/valid/function/simple_functions/sameArgName.wacc", include_str!("../tests/valid/function/simple_functions/sameArgName.wacc"), vec![])]
#[case("../tests/valid/function/simple_functions/functionDeclaration.wacc", include_str!("../tests/valid/function/simple_functions/functionDeclaration.wacc"), vec![])]
#[case("../tests/valid/function/simple_functions/functionManyArguments.wacc", include_str!("../tests/valid/function/simple_functions/functionManyArguments.wacc"), vec![])]
#[case("../tests/valid/function/simple_functions/negFunction.wacc", include_str!("../tests/valid/function/simple_functions/negFunction.wacc"), vec![])]
#[case("../tests/valid/function/simple_functions/asciiTable.wacc", include_str!("../tests/valid/function/simple_functions/asciiTable.wacc"), vec![])]
#[case("../tests/valid/function/simple_functions/functionReturnPair.wacc", include_str!("../tests/valid/function/simple_functions/functionReturnPair.wacc"), vec![])]
#[case("../tests/valid/function/simple_functions/functionSimple.wacc", include_str!("../tests/valid/function/simple_functions/functionSimple.wacc"), vec![])]
#[case("../tests/valid/function/nested_functions/fibonacciFullRec.wacc", include_str!("../tests/valid/function/nested_functions/fibonacciFullRec.wacc"), vec![])]
#[case("../tests/valid/function/nested_functions/printInputTriangle.wacc", include_str!("../tests/valid/function/nested_functions/printInputTriangle.wacc"), vec![])]
#[case("../tests/valid/function/nested_functions/functionConditionalReturn.wacc", include_str!("../tests/valid/function/nested_functions/functionConditionalReturn.wacc"), vec![])]
#[case("../tests/valid/function/nested_functions/printTriangle.wacc", include_str!("../tests/valid/function/nested_functions/printTriangle.wacc"), vec![])]
#[case("../tests/valid/function/nested_functions/mutualRecursion.wacc", include_str!("../tests/valid/function/nested_functions/mutualRecursion.wacc"), vec![])]
#[case("../tests/valid/function/nested_functions/fixedPointRealArithmetic.wacc", include_str!("../tests/valid/function/nested_functions/fixedPointRealArithmetic.wacc"), vec![])]
#[case("../tests/valid/function/nested_functions/simpleRecursion.wacc", include_str!("../tests/valid/function/nested_functions/simpleRecursion.wacc"), vec![])]
#[case("../tests/valid/function/nested_functions/fibonacciRecursive.wacc", include_str!("../tests/valid/function/nested_functions/fibonacciRecursive.wacc"), vec![])]
#[case("../tests/valid/variables/_VarNames.wacc", include_str!("../tests/valid/variables/_VarNames.wacc"), vec![])]
#[case("../tests/valid/variables/puncCharDeclaration.wacc", include_str!("../tests/valid/variables/puncCharDeclaration.wacc"), vec![])]
#[case("../tests/valid/variables/longVarNames.wacc", include_str!("../tests/valid/variables/longVarNames.wacc"), vec![])]
#[case("../tests/valid/variables/boolDeclaration.wacc", include_str!("../tests/valid/variables/boolDeclaration.wacc"), vec![])]
#[case("../tests/valid/variables/charDeclaration2.wacc", include_str!("../tests/valid/variables/charDeclaration2.wacc"), vec![])]
#[case("../tests/valid/variables/zeroIntDeclaration.wacc", include_str!("../tests/valid/variables/zeroIntDeclaration.wacc"), vec![])]
#[case("../tests/valid/variables/emptyStringDeclaration.wacc", include_str!("../tests/valid/variables/emptyStringDeclaration.wacc"), vec![])]
#[case("../tests/valid/variables/negIntDeclaration.wacc", include_str!("../tests/valid/variables/negIntDeclaration.wacc"), vec![])]
#[case("../tests/valid/variables/intDeclaration.wacc", include_str!("../tests/valid/variables/intDeclaration.wacc"), vec![])]
#[case("../tests/valid/variables/manyVariables.wacc", include_str!("../tests/valid/variables/manyVariables.wacc"), vec![])]
#[case("../tests/valid/variables/capCharDeclaration.wacc", include_str!("../tests/valid/variables/capCharDeclaration.wacc"), vec![])]
#[case("../tests/valid/variables/charDeclaration.wacc", include_str!("../tests/valid/variables/charDeclaration.wacc"), vec![])]
#[case("../tests/valid/variables/boolDeclaration2.wacc", include_str!("../tests/valid/variables/boolDeclaration2.wacc"), vec![])]
#[case("../tests/valid/variables/stringDeclaration.wacc", include_str!("../tests/valid/variables/stringDeclaration.wacc"), vec![])]
#[case("../tests/valid/array/arrayLookup.wacc", include_str!("../tests/valid/array/arrayLookup.wacc"), vec![])]
#[case("../tests/valid/array/arrayBasic.wacc", include_str!("../tests/valid/array/arrayBasic.wacc"), vec![])]
#[case("../tests/valid/array/arrayEmpty.wacc", include_str!("../tests/valid/array/arrayEmpty.wacc"), vec![])]
#[case("../tests/valid/array/arrayLength.wacc", include_str!("../tests/valid/array/arrayLength.wacc"), vec![])]
#[case("../tests/valid/array/arrayNested.wacc", include_str!("../tests/valid/array/arrayNested.wacc"), vec![])]
#[case("../tests/valid/array/modifyString.wacc", include_str!("../tests/valid/array/modifyString.wacc"), vec![])]
#[case("../tests/valid/array/arrayPrint.wacc", include_str!("../tests/valid/array/arrayPrint.wacc"), vec![])]
#[case("../tests/valid/array/arraySimple.wacc", include_str!("../tests/valid/array/arraySimple.wacc"), vec![])]
#[case("../tests/valid/array/printRef.wacc", include_str!("../tests/valid/array/printRef.wacc"), vec![])]
#[case("../tests/valid/array/array.wacc", include_str!("../tests/valid/array/array.wacc"), vec![])]
#[case("../tests/valid/IO/IOLoop.wacc", include_str!("../tests/valid/IO/IOLoop.wacc"), vec![])]
#[case("../tests/valid/IO/IOSequence.wacc", include_str!("../tests/valid/IO/IOSequence.wacc"), vec![])]
#[case("../tests/valid/IO/read/echoNegInt.wacc", include_str!("../tests/valid/IO/read/echoNegInt.wacc"), vec![])]
#[case("../tests/valid/IO/read/echoBigInt.wacc", include_str!("../tests/valid/IO/read/echoBigInt.wacc"), vec![])]
#[case("../tests/valid/IO/read/read.wacc", include_str!("../tests/valid/IO/read/read.wacc"), vec![])]
#[case("../tests/valid/IO/read/echoChar.wacc", include_str!("../tests/valid/IO/read/echoChar.wacc"), vec![])]
#[case("../tests/valid/IO/read/echoInt.wacc", include_str!("../tests/valid/IO/read/echoInt.wacc"), vec![])]
#[case("../tests/valid/IO/read/echoPuncChar.wacc", include_str!("../tests/valid/IO/read/echoPuncChar.wacc"), vec![])]
#[case("../tests/valid/IO/read/echoBigNegInt.wacc", include_str!("../tests/valid/IO/read/echoBigNegInt.wacc"), vec![])]
#[case("../tests/valid/IO/print/printBool.wacc", include_str!("../tests/valid/IO/print/printBool.wacc"), vec![])]
#[case("../tests/valid/IO/print/print.wacc", include_str!("../tests/valid/IO/print/print.wacc"), vec![])]
#[case("../tests/valid/IO/print/println.wacc", include_str!("../tests/valid/IO/print/println.wacc"), vec![])]
#[case("../tests/valid/IO/print/printEscChar.wacc", include_str!("../tests/valid/IO/print/printEscChar.wacc"), vec![])]
#[case("../tests/valid/IO/print/printChar.wacc", include_str!("../tests/valid/IO/print/printChar.wacc"), vec![])]
#[case("../tests/valid/IO/print/multipleStringsAssignment.wacc", include_str!("../tests/valid/IO/print/multipleStringsAssignment.wacc"), vec![])]
#[case("../tests/valid/IO/print/printCharArray.wacc", include_str!("../tests/valid/IO/print/printCharArray.wacc"), vec![])]
#[case("../tests/valid/IO/print/printCharAsString.wacc", include_str!("../tests/valid/IO/print/printCharAsString.wacc"), vec![])]
#[case("../tests/valid/IO/print/print-backspace.wacc", include_str!("../tests/valid/IO/print/print-backspace.wacc"), vec![])]
#[case("../tests/valid/IO/print/print-carridge-return.wacc", include_str!("../tests/valid/IO/print/print-carridge-return.wacc"), vec![])]
#[case("../tests/valid/IO/print/hashInProgram.wacc", include_str!("../tests/valid/IO/print/hashInProgram.wacc"), vec![])]
#[case("../tests/valid/IO/print/printInt.wacc", include_str!("../tests/valid/IO/print/printInt.wacc"), vec![])]
#[case("../tests/valid/while/fibonacciFullIt.wacc", include_str!("../tests/valid/while/fibonacciFullIt.wacc"), vec![])]
#[case("../tests/valid/while/min.wacc", include_str!("../tests/valid/while/min.wacc"), vec![])]
#[case("../tests/valid/while/max.wacc", include_str!("../tests/valid/while/max.wacc"), vec![])]
#[case("../tests/valid/while/whileCount.wacc", include_str!("../tests/valid/while/whileCount.wacc"), vec![])]
#[case("../tests/valid/while/loopCharCondition.wacc", include_str!("../tests/valid/while/loopCharCondition.wacc"), vec![])]
#[case("../tests/valid/while/loopIntCondition.wacc", include_str!("../tests/valid/while/loopIntCondition.wacc"), vec![])]
#[case("../tests/valid/while/whileBoolFlip.wacc", include_str!("../tests/valid/while/whileBoolFlip.wacc"), vec![])]
#[case("../tests/valid/while/fibonacciIterative.wacc", include_str!("../tests/valid/while/fibonacciIterative.wacc"), vec![])]
#[case("../tests/valid/while/whileBasic.wacc", include_str!("../tests/valid/while/whileBasic.wacc"), vec![])]
#[case("../tests/valid/while/rmStyleAdd.wacc", include_str!("../tests/valid/while/rmStyleAdd.wacc"), vec![])]
#[case("../tests/valid/while/whileFalse.wacc", include_str!("../tests/valid/while/whileFalse.wacc"), vec![])]
#[case("../tests/valid/while/rmStyleAddIO.wacc", include_str!("../tests/valid/while/rmStyleAddIO.wacc"), vec![])]
#[case("../tests/valid/expressions/sequentialCount.wacc", include_str!("../tests/valid/expressions/sequentialCount.wacc"), vec![])]
#[case("../tests/valid/expressions/andExpr.wacc", include_str!("../tests/valid/expressions/andExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/equalsExpr.wacc", include_str!("../tests/valid/expressions/equalsExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/charComparisonExpr.wacc", include_str!("../tests/valid/expressions/charComparisonExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/intExpr1.wacc", include_str!("../tests/valid/expressions/intExpr1.wacc"), vec![])]
#[case("../tests/valid/expressions/andOverOrExpr.wacc", include_str!("../tests/valid/expressions/andOverOrExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/minusPlusExpr.wacc", include_str!("../tests/valid/expressions/minusPlusExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/negBothDiv.wacc", include_str!("../tests/valid/expressions/negBothDiv.wacc"), vec![])]
#[case("../tests/valid/expressions/plusMinusExpr.wacc", include_str!("../tests/valid/expressions/plusMinusExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/multNoWhitespaceExpr.wacc", include_str!("../tests/valid/expressions/multNoWhitespaceExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/equalsOverBool.wacc", include_str!("../tests/valid/expressions/equalsOverBool.wacc"), vec![])]
#[case("../tests/valid/expressions/equalsOverOr.wacc", include_str!("../tests/valid/expressions/equalsOverOr.wacc"), vec![])]
#[case("../tests/valid/expressions/negExpr.wacc", include_str!("../tests/valid/expressions/negExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/notequalsExpr.wacc", include_str!("../tests/valid/expressions/notequalsExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/longExpr.wacc", include_str!("../tests/valid/expressions/longExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/negDivisorDiv.wacc", include_str!("../tests/valid/expressions/negDivisorDiv.wacc"), vec![])]
#[case("../tests/valid/expressions/lessCharExpr.wacc", include_str!("../tests/valid/expressions/lessCharExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/multExpr.wacc", include_str!("../tests/valid/expressions/multExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/minusExpr.wacc", include_str!("../tests/valid/expressions/minusExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/longSplitExpr.wacc", include_str!("../tests/valid/expressions/longSplitExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/minusNoWhitespaceExpr.wacc", include_str!("../tests/valid/expressions/minusNoWhitespaceExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/longExpr3.wacc", include_str!("../tests/valid/expressions/longExpr3.wacc"), vec![])]
#[case("../tests/valid/expressions/negBothMod.wacc", include_str!("../tests/valid/expressions/negBothMod.wacc"), vec![])]
#[case("../tests/valid/expressions/plusNoWhitespaceExpr.wacc", include_str!("../tests/valid/expressions/plusNoWhitespaceExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/stringEqualsExpr.wacc", include_str!("../tests/valid/expressions/stringEqualsExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/modExpr.wacc", include_str!("../tests/valid/expressions/modExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/ordAndchrExpr.wacc", include_str!("../tests/valid/expressions/ordAndchrExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/negDividendDiv.wacc", include_str!("../tests/valid/expressions/negDividendDiv.wacc"), vec![])]
#[case("../tests/valid/expressions/notExpr.wacc", include_str!("../tests/valid/expressions/notExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/boolExpr1.wacc", include_str!("../tests/valid/expressions/boolExpr1.wacc"), vec![])]
#[case("../tests/valid/expressions/lessEqExpr.wacc", include_str!("../tests/valid/expressions/lessEqExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/intCalc.wacc", include_str!("../tests/valid/expressions/intCalc.wacc"), vec![])]
#[case("../tests/valid/expressions/plusPlusExpr.wacc", include_str!("../tests/valid/expressions/plusPlusExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/longExpr2.wacc", include_str!("../tests/valid/expressions/longExpr2.wacc"), vec![])]
#[case("../tests/valid/expressions/equalsOverAnd.wacc", include_str!("../tests/valid/expressions/equalsOverAnd.wacc"), vec![])]
#[case("../tests/valid/expressions/orExpr.wacc", include_str!("../tests/valid/expressions/orExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/negDividendMod.wacc", include_str!("../tests/valid/expressions/negDividendMod.wacc"), vec![])]
#[case("../tests/valid/expressions/plusExpr.wacc", include_str!("../tests/valid/expressions/plusExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/greaterEqExpr.wacc", include_str!("../tests/valid/expressions/greaterEqExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/negDivisorMod.wacc", include_str!("../tests/valid/expressions/negDivisorMod.wacc"), vec![])]
#[case("../tests/valid/expressions/longSplitExpr2.wacc", include_str!("../tests/valid/expressions/longSplitExpr2.wacc"), vec![])]
#[case("../tests/valid/expressions/minusMinusExpr.wacc", include_str!("../tests/valid/expressions/minusMinusExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/greaterExpr.wacc", include_str!("../tests/valid/expressions/greaterExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/lessExpr.wacc", include_str!("../tests/valid/expressions/lessExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/divExpr.wacc", include_str!("../tests/valid/expressions/divExpr.wacc"), vec![])]
#[case("../tests/valid/expressions/boolCalc.wacc", include_str!("../tests/valid/expressions/boolCalc.wacc"), vec![])]
#[case("../tests/valid/sequence/basicSeq.wacc", include_str!("../tests/valid/sequence/basicSeq.wacc"), vec![])]
#[case("../tests/valid/sequence/intAssignment.wacc", include_str!("../tests/valid/sequence/intAssignment.wacc"), vec![])]
#[case("../tests/valid/sequence/stringAssignment.wacc", include_str!("../tests/valid/sequence/stringAssignment.wacc"), vec![])]
#[case("../tests/valid/sequence/basicSeq2.wacc", include_str!("../tests/valid/sequence/basicSeq2.wacc"), vec![])]
#[case("../tests/valid/sequence/boolAssignment.wacc", include_str!("../tests/valid/sequence/boolAssignment.wacc"), vec![])]
#[case("../tests/valid/sequence/charAssignment.wacc", include_str!("../tests/valid/sequence/charAssignment.wacc"), vec![])]
#[case("../tests/valid/sequence/exitSimple.wacc", include_str!("../tests/valid/sequence/exitSimple.wacc"), vec![])]
#[case("../tests/valid/sequence/intLeadingZeros.wacc", include_str!("../tests/valid/sequence/intLeadingZeros.wacc"), vec![])]
#[case("../tests/valid/if/if2.wacc", include_str!("../tests/valid/if/if2.wacc"), vec![])]
#[case("../tests/valid/if/if5.wacc", include_str!("../tests/valid/if/if5.wacc"), vec![])]
#[case("../tests/valid/if/whitespace.wacc", include_str!("../tests/valid/if/whitespace.wacc"), vec![])]
#[case("../tests/valid/if/if4.wacc", include_str!("../tests/valid/if/if4.wacc"), vec![])]
#[case("../tests/valid/if/if6.wacc", include_str!("../tests/valid/if/if6.wacc"), vec![])]
#[case("../tests/valid/if/ifFalse.wacc", include_str!("../tests/valid/if/ifFalse.wacc"), vec![])]
#[case("../tests/valid/if/if1.wacc", include_str!("../tests/valid/if/if1.wacc"), vec![])]
#[case("../tests/valid/if/if3.wacc", include_str!("../tests/valid/if/if3.wacc"), vec![])]
#[case("../tests/valid/if/ifTrue.wacc", include_str!("../tests/valid/if/ifTrue.wacc"), vec![])]
#[case("../tests/valid/if/ifBasic.wacc", include_str!("../tests/valid/if/ifBasic.wacc"), vec![])]
#[case("../tests/valid/advanced/binarySortTree.wacc", include_str!("../tests/valid/advanced/binarySortTree.wacc"), vec![])]
#[case("../tests/valid/advanced/hashTable.wacc", include_str!("../tests/valid/advanced/hashTable.wacc"), vec![])]
#[case("../tests/valid/advanced/ticTacToe.wacc", include_str!("../tests/valid/advanced/ticTacToe.wacc"), vec![])]
#[case("../tests/valid/pairs/null.wacc", include_str!("../tests/valid/pairs/null.wacc"), vec![])]
#[case("../tests/valid/pairs/createPair.wacc", include_str!("../tests/valid/pairs/createPair.wacc"), vec![])]
#[case("../tests/valid/pairs/printPairOfNulls.wacc", include_str!("../tests/valid/pairs/printPairOfNulls.wacc"), vec![])]
#[case("../tests/valid/pairs/createRefPair.wacc", include_str!("../tests/valid/pairs/createRefPair.wacc"), vec![])]
#[case("../tests/valid/pairs/readPair.wacc", include_str!("../tests/valid/pairs/readPair.wacc"), vec![])]
#[case("../tests/valid/pairs/free.wacc", include_str!("../tests/valid/pairs/free.wacc"), vec![])]
#[case("../tests/valid/pairs/printPair.wacc", include_str!("../tests/valid/pairs/printPair.wacc"), vec![])]
#[case("../tests/valid/pairs/printNullPair.wacc", include_str!("../tests/valid/pairs/printNullPair.wacc"), vec![])]
#[case("../tests/valid/pairs/checkRefPair.wacc", include_str!("../tests/valid/pairs/checkRefPair.wacc"), vec![])]
#[case("../tests/valid/pairs/writeSnd.wacc", include_str!("../tests/valid/pairs/writeSnd.wacc"), vec![])]
#[case("../tests/valid/pairs/createPair02.wacc", include_str!("../tests/valid/pairs/createPair02.wacc"), vec![])]
#[case("../tests/valid/pairs/createPair03.wacc", include_str!("../tests/valid/pairs/createPair03.wacc"), vec![])]
#[case("../tests/valid/pairs/writeFst.wacc", include_str!("../tests/valid/pairs/writeFst.wacc"), vec![])]
#[case("../tests/valid/pairs/printNull.wacc", include_str!("../tests/valid/pairs/printNull.wacc"), vec![])]
#[case("../tests/valid/pairs/nestedPair.wacc", include_str!("../tests/valid/pairs/nestedPair.wacc"), vec![])]
#[case("../tests/valid/pairs/linkedList.wacc", include_str!("../tests/valid/pairs/linkedList.wacc"), vec![])]
#[case("../tests/valid/basic/exit/exitBasic2.wacc", include_str!("../tests/valid/basic/exit/exitBasic2.wacc"), vec![])]
#[case("../tests/valid/basic/exit/exitBasic.wacc", include_str!("../tests/valid/basic/exit/exitBasic.wacc"), vec![])]
#[case("../tests/valid/basic/exit/exit-1.wacc", include_str!("../tests/valid/basic/exit/exit-1.wacc"), vec![])]
#[case("../tests/valid/basic/exit/exitWrap.wacc", include_str!("../tests/valid/basic/exit/exitWrap.wacc"), vec![])]
#[case("../tests/valid/basic/skip/skip.wacc", include_str!("../tests/valid/basic/skip/skip.wacc"), vec![])]
#[case("../tests/valid/basic/skip/comment.wacc", include_str!("../tests/valid/basic/skip/comment.wacc"), vec![])]
#[case("../tests/valid/basic/skip/commentInLine.wacc", include_str!("../tests/valid/basic/skip/commentInLine.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/multiple/funcMess.wacc", include_str!("../tests/invalid/semanticErr/multiple/funcMess.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/multiple/ifAndWhileErrs.wacc", include_str!("../tests/invalid/semanticErr/multiple/ifAndWhileErrs.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/multiple/multiTypeErrs.wacc", include_str!("../tests/invalid/semanticErr/multiple/multiTypeErrs.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/multiple/multiCaseSensitivity.wacc", include_str!("../tests/invalid/semanticErr/multiple/multiCaseSensitivity.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/multiple/messyExpr.wacc", include_str!("../tests/invalid/semanticErr/multiple/messyExpr.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/scope/badScopeRedefine.wacc", include_str!("../tests/invalid/semanticErr/scope/badScopeRedefine.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/read/readTypeErr01.wacc", include_str!("../tests/invalid/semanticErr/read/readTypeErr01.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/function/functionOverArgs.wacc", include_str!("../tests/invalid/semanticErr/function/functionOverArgs.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/function/functionBadParam.wacc", include_str!("../tests/invalid/semanticErr/function/functionBadParam.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/function/functionBadReturn.wacc", include_str!("../tests/invalid/semanticErr/function/functionBadReturn.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/function/funcVarAccess.wacc", include_str!("../tests/invalid/semanticErr/function/funcVarAccess.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/function/functionSwapArgs.wacc", include_str!("../tests/invalid/semanticErr/function/functionSwapArgs.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/function/functionBadCall.wacc", include_str!("../tests/invalid/semanticErr/function/functionBadCall.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/function/functionUnderArgs.wacc", include_str!("../tests/invalid/semanticErr/function/functionUnderArgs.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/function/functionBadArgUse.wacc", include_str!("../tests/invalid/semanticErr/function/functionBadArgUse.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/function/functionAssign.wacc", include_str!("../tests/invalid/semanticErr/function/functionAssign.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/function/functionRedefine.wacc", include_str!("../tests/invalid/semanticErr/function/functionRedefine.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/undeclaredVar.wacc", include_str!("../tests/invalid/semanticErr/variables/undeclaredVar.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/basicTypeErr08.wacc", include_str!("../tests/invalid/semanticErr/variables/basicTypeErr08.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/basicTypeErr01.wacc", include_str!("../tests/invalid/semanticErr/variables/basicTypeErr01.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/basicTypeErr10.wacc", include_str!("../tests/invalid/semanticErr/variables/basicTypeErr10.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/undeclaredVarAccess.wacc", include_str!("../tests/invalid/semanticErr/variables/undeclaredVarAccess.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/basicTypeErr07.wacc", include_str!("../tests/invalid/semanticErr/variables/basicTypeErr07.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/basicTypeErr02.wacc", include_str!("../tests/invalid/semanticErr/variables/basicTypeErr02.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/basicTypeErr06.wacc", include_str!("../tests/invalid/semanticErr/variables/basicTypeErr06.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/basicTypeErr03.wacc", include_str!("../tests/invalid/semanticErr/variables/basicTypeErr03.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/basicTypeErr04.wacc", include_str!("../tests/invalid/semanticErr/variables/basicTypeErr04.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/basicTypeErr05.wacc", include_str!("../tests/invalid/semanticErr/variables/basicTypeErr05.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/basicTypeErr12.wacc", include_str!("../tests/invalid/semanticErr/variables/basicTypeErr12.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/doubleDeclare.wacc", include_str!("../tests/invalid/semanticErr/variables/doubleDeclare.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/caseMatters.wacc", include_str!("../tests/invalid/semanticErr/variables/caseMatters.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/undeclaredScopeVar.wacc", include_str!("../tests/invalid/semanticErr/variables/undeclaredScopeVar.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/basicTypeErr11.wacc", include_str!("../tests/invalid/semanticErr/variables/basicTypeErr11.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/variables/basicTypeErr09.wacc", include_str!("../tests/invalid/semanticErr/variables/basicTypeErr09.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/print/printTypeErr01.wacc", include_str!("../tests/invalid/semanticErr/print/printTypeErr01.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/exit/badCharExit.wacc", include_str!("../tests/invalid/semanticErr/exit/badCharExit.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/exit/globalReturn.wacc", include_str!("../tests/invalid/semanticErr/exit/globalReturn.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/exit/exitNonInt.wacc", include_str!("../tests/invalid/semanticErr/exit/exitNonInt.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/IO/readTypeErr.wacc", include_str!("../tests/invalid/semanticErr/IO/readTypeErr.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/while/falsErr.wacc", include_str!("../tests/invalid/semanticErr/while/falsErr.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/while/truErr.wacc", include_str!("../tests/invalid/semanticErr/while/truErr.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/while/whileIntCondition.wacc", include_str!("../tests/invalid/semanticErr/while/whileIntCondition.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/expressions/exprTypeErr.wacc", include_str!("../tests/invalid/semanticErr/expressions/exprTypeErr.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/expressions/boolOpTypeErr.wacc", include_str!("../tests/invalid/semanticErr/expressions/boolOpTypeErr.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/expressions/intOpTypeErr.wacc", include_str!("../tests/invalid/semanticErr/expressions/intOpTypeErr.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/expressions/moreArrExpr.wacc", include_str!("../tests/invalid/semanticErr/expressions/moreArrExpr.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/expressions/lessPairExpr.wacc", include_str!("../tests/invalid/semanticErr/expressions/lessPairExpr.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/expressions/stringElemErr.wacc", include_str!("../tests/invalid/semanticErr/expressions/stringElemErr.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/expressions/mixedOpTypeErr.wacc", include_str!("../tests/invalid/semanticErr/expressions/mixedOpTypeErr.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/if/ifIntCondition.wacc", include_str!("../tests/invalid/semanticErr/if/ifIntCondition.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/pairs/sndNull.wacc", include_str!("../tests/invalid/semanticErr/pairs/sndNull.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/pairs/fstNull.wacc", include_str!("../tests/invalid/semanticErr/pairs/fstNull.wacc"), vec![])]
#[case("../tests/invalid/semanticErr/pairs/freeNonPair.wacc", include_str!("../tests/invalid/semanticErr/pairs/freeNonPair.wacc"), vec![])]
fn parse_pass(#[case] file_name: &str, #[case] source: &str, #[case] includes: Vec<&str>) {
    let res = parse(source, includes).map_err(|mut e| {
        e.add_input_file(source, file_name.to_string());
        e
    });
    if let Err(e) = &res {
        println!("{}", e);
    }
    assert!(res.is_ok());
}

#[rstest]
#[case("../tests/invalid/syntaxErr/function/funcExpr2.wacc", include_str!("../tests/invalid/syntaxErr/function/funcExpr2.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/function/functionMissingCall.wacc", include_str!("../tests/invalid/syntaxErr/function/functionMissingCall.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/function/functionMissingParam.wacc", include_str!("../tests/invalid/syntaxErr/function/functionMissingParam.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/function/badlyPlaced.wacc", include_str!("../tests/invalid/syntaxErr/function/badlyPlaced.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/function/badlyNamed.wacc", include_str!("../tests/invalid/syntaxErr/function/badlyNamed.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/function/funcExpr.wacc", include_str!("../tests/invalid/syntaxErr/function/funcExpr.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/function/functionMissingType.wacc", include_str!("../tests/invalid/syntaxErr/function/functionMissingType.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/function/functionMissingPType.wacc", include_str!("../tests/invalid/syntaxErr/function/functionMissingPType.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/function/thisIsNotC.wacc", include_str!("../tests/invalid/syntaxErr/function/thisIsNotC.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/function/functionScopeDef.wacc", include_str!("../tests/invalid/syntaxErr/function/functionScopeDef.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/function/functionLateDefine.wacc", include_str!("../tests/invalid/syntaxErr/function/functionLateDefine.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/function/noBodyAfterFuncs.wacc", include_str!("../tests/invalid/syntaxErr/function/noBodyAfterFuncs.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/variables/badintAssignments.wacc", include_str!("../tests/invalid/syntaxErr/variables/badintAssignments.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/variables/bigIntAssignment.wacc", include_str!("../tests/invalid/syntaxErr/variables/bigIntAssignment.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/variables/varNoName.wacc", include_str!("../tests/invalid/syntaxErr/variables/varNoName.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/variables/badintAssignments2.wacc", include_str!("../tests/invalid/syntaxErr/variables/badintAssignments2.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/variables/badintAssignments1.wacc", include_str!("../tests/invalid/syntaxErr/variables/badintAssignments1.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/array/arrayExpr.wacc", include_str!("../tests/invalid/syntaxErr/array/arrayExpr.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/print/printlnCharArry.wacc", include_str!("../tests/invalid/syntaxErr/print/printlnCharArry.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/while/donoErr.wacc", include_str!("../tests/invalid/syntaxErr/while/donoErr.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/while/dooErr.wacc", include_str!("../tests/invalid/syntaxErr/while/dooErr.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/while/whileNodo.wacc", include_str!("../tests/invalid/syntaxErr/while/whileNodo.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/while/whileNodone.wacc", include_str!("../tests/invalid/syntaxErr/while/whileNodone.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/while/whilErr.wacc", include_str!("../tests/invalid/syntaxErr/while/whilErr.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/expressions/missingOperand2.wacc", include_str!("../tests/invalid/syntaxErr/expressions/missingOperand2.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/expressions/printlnConcat.wacc", include_str!("../tests/invalid/syntaxErr/expressions/printlnConcat.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/expressions/missingOperand1.wacc", include_str!("../tests/invalid/syntaxErr/expressions/missingOperand1.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/sequence/emptySeq.wacc", include_str!("../tests/invalid/syntaxErr/sequence/emptySeq.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/sequence/endSeq.wacc", include_str!("../tests/invalid/syntaxErr/sequence/endSeq.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/sequence/extraSeq.wacc", include_str!("../tests/invalid/syntaxErr/sequence/extraSeq.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/sequence/doubleSeq.wacc", include_str!("../tests/invalid/syntaxErr/sequence/doubleSeq.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/sequence/missingSeq.wacc", include_str!("../tests/invalid/syntaxErr/sequence/missingSeq.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/if/ifiErr.wacc", include_str!("../tests/invalid/syntaxErr/if/ifiErr.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/if/ifNothen.wacc", include_str!("../tests/invalid/syntaxErr/if/ifNothen.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/if/ifNoelse.wacc", include_str!("../tests/invalid/syntaxErr/if/ifNoelse.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/if/ifNofi.wacc", include_str!("../tests/invalid/syntaxErr/if/ifNofi.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/pairs/badLookup02.wacc", include_str!("../tests/invalid/syntaxErr/pairs/badLookup02.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/pairs/badLookup01.wacc", include_str!("../tests/invalid/syntaxErr/pairs/badLookup01.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/basic/unescapedChar.wacc", include_str!("../tests/invalid/syntaxErr/basic/unescapedChar.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/basic/badEscape.wacc", include_str!("../tests/invalid/syntaxErr/basic/badEscape.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/basic/badComment2.wacc", include_str!("../tests/invalid/syntaxErr/basic/badComment2.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/basic/multipleBegins.wacc", include_str!("../tests/invalid/syntaxErr/basic/multipleBegins.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/basic/badComment.wacc", include_str!("../tests/invalid/syntaxErr/basic/badComment.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/basic/beginNoend.wacc", include_str!("../tests/invalid/syntaxErr/basic/beginNoend.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/basic/bgnErr.wacc", include_str!("../tests/invalid/syntaxErr/basic/bgnErr.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/basic/noBody.wacc", include_str!("../tests/invalid/syntaxErr/basic/noBody.wacc"), vec![])]
#[case("../tests/invalid/syntaxErr/basic/skpErr.wacc", include_str!("../tests/invalid/syntaxErr/basic/skpErr.wacc"), vec![])]
fn parse_fail(#[case] file_name: &str, #[case] source: &str, #[case] includes: Vec<&str>) {
    let res = parse(source, includes).map_err(|mut e| {
        e.add_input_file(source, file_name.to_string());
        e
    });
    if let Ok(p) = &res {
        println!("{:#?}", p);
    }
    assert!(res.is_err());
}
